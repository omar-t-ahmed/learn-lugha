datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  email        String        @unique
  password     String?        // Store hashed passwords here
  name         String?
  username     String        @unique 
  lessons      Lesson[]
  achievements Achievement[]
  transcripts  Transcript[]
  progress     Progress?
  accounts     Account[]
  sessions     Session[]
}

model Lesson {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  createdAt   DateTime @default(now())
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
}

model Achievement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
}

model Transcript {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  text        String
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}

model Progress {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  level       Int
  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
}

// NextAuth models
model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider           String
  providerAccountId  String
  type               String
  access_token       String?  // Optional fields for tokens
  refresh_token      String?
  expires_at         Int?
  scope              String?
  id_token           String?
  session_state      String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
}
